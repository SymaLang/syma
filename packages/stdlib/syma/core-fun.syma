{Module
  Core/Fun
  {Export Def Call}
  {RuleRules
    ; Def ->  R("fun/name/#", {Call name <pat...>}, body)
    R(
      "Def->R'",
      {Def SYMAFNNAME_ {Args pats...} SYMAFNBODY_},
      {R {Concat "fun/" {ToString SYMAFNNAME_} "/" Arity(pats...)} {Call SYMAFNNAME_ pats...} SYMAFNBODY_}
    )
    {R
      "Def->R'-guarded"
      {Def SYMAFNNAME_ {Args pats...} SYMAFNBODY_ :guard SYMARULEGUARD_}
      {R {Concat "fun/" {ToString SYMAFNNAME_} "/" Arity(pats...)} {Call SYMAFNNAME_ pats...} SYMAFNBODY_  SYMARULEGUARD_}
    }
    R("Arity/Empty",  Arity(), 0)
    R("Arity/Step",   Arity(_, xs...), Add(1, Arity(xs...)))
  }
}
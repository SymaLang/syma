{Module
  Demo/Todo
  {Import Core/Main as C open}
  {Import Todo/Filters as TF from "./filters.syma" open}
  {Export}
  {Program
    App(
      State(
        {NextId 2},
        {Todos 
          {Todo {Id 0} {Text "Learn Syma"} {Done False}} 
          {Todo {Id 1} {Text "Build awesome apps"} {Done True}}
        },
        {Filter All}
      ),
      {UI
        {Div
          :class "flex flex-col items-center p-4 font-sans"
          {H1 :class "text-2xl font-bold mb-4" "Todo List"}
          {Div :class "flex flex-col gap-2 w-md"
            {FiltersView}
            {Project AddTodo}
            {Project RenderTodos}
          }
        }
      }
    )
  }

  {Rules
    {R "LiftApplyThroughProgramAndApp"
      Apply(act_, {Program App(st_, ui_) eff_})
      {Program App(Apply(act_, st_), ui_) eff_}
    }

    {R "RenderTodos"
      {/@ RenderTodos {App {State {NextId n_} {Todos todos...} {Filter f_}} _}}
      {Div :class "flex flex-col gap-2" {RenderList f_ todos...}}
    }

    {R "RenderList/End"
      {RenderList f_}
      Empty
    }

    {R "RenderList/Item"
      {RenderList f_ {Todo {Id id_} {Text text_} {Done done_}} rest...}
      {...! 
        {Div 
          :class If(done_, "flex items-center gap-2 bg-green-100 p-2 rounded", "flex items-center gap-2 bg-yellow-100 p-2 rounded")
          {Button 
            :onClick ToggleDone(id_, done_) 
            {If done_ "✅" "⬜"}
          }
          {Span 
            :class If(done_, "line-through text-gray-500", "") 
            text_
          }
          {Button 
            :class "ml-auto bg-red-500 text-white px-2 py-1 rounded"
            :onClick DeleteTodo(id_)
            "Delete"
          }
        }
        {RenderList f_ rest...}
      }
      :guard Or(Eq(f_, All), And(Eq(f_, Active), Not(done_)), And(Eq(f_, Completed), done_))
    }

    {R "RenderList/Skip"
      {RenderList f_ {Todo {Id id_} {Text text_} {Done done_}} rest...}
      {RenderList f_ rest...}
      :guard Not(Or(Eq(f_, All), And(Eq(f_, Active), Not(done_)), And(Eq(f_, Completed), done_)))
    }

    {R "DeleteTodo"
      Apply(DeleteTodo(id_), {State {NextId n_} {Todos before... {Todo {Id id_} ...} after...} {Filter f_}})
      {State 
        {NextId n_} 
        {Todos before... after...} 
        {Filter f_}
      } 
    }

    {R "ToggleDone"
      Apply(ToggleDone(id_, done_), {State {NextId n_} {Todos before... {Todo {Id id_} {Text text_} {Done done_}} after...} {Filter f_}})
      {State 
        {NextId n_} 
        {Todos before... {Todo {Id id_} {Text text_} {Done Not(done_)}} after...} 
        {Filter f_}
      } 
    }

    ; ------ Add Todo ------
    {R "AddTodo"
      {/@ AddTodo {App {State {NextId n_} {Todos todos...} {Filter f_}} _}}
      {Div :class "flex gap-2"
        {Div :class "flex gap-2 grow"
          {Input 
            :id "new-todo-input"
            :type "text"
            :placeholder "New todo..."
            :class "border p-2 flex-grow rounded"
            :value {Input todoInput}
            :onKeydown {When {KeyIs "Enter"}
                                {PreventDefault
                                  {Seq
                                    {AddTodo {Input todoInput}}
                                    {ClearInput todoInput}}}}
          }
        }
        {Button 
          :class "bg-green-500 text-white px-4 py-2 rounded"
          :onClick {Seq
                      {AddTodo {Input todoInput}}
                      {ClearInput todoInput}
                   }
          "Add"
        }
      }
    }

    {R "AddTodo/Action"
      Apply(AddTodo(text_), {State {NextId n_} {Todos todos...} {Filter f_}})
      {State 
        {NextId Add(n_, 1)} 
        {Todos todos... {Todo {Id n_} {Text text_} {Done False}}} 
        {Filter f_}
      }
      :guard And(Not(Eq(text_, "")), Not(Eq(text_, Null)))
    }
    {R "AddTodo/Empty"
      Apply(AddTodo(text_), {State s...})
      {State s...}
      :guard Or(Eq(text_, ""), Eq(text_, Null))
    }
  }
}
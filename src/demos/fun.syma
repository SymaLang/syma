/**
  * A demo of a functional sugar program: Fibonacci with an accumulator.
  * Execute it in REPL with: {Core/Fun/Call Fib 55}
  */
{Module
  Demo/Fun
  {Import Core/Fun/WithSugar as CFS open macro}
  {Program}
  {Rules
    {Fn Fib(n_) {FibAcc(n_, 0, 1)}}
    {Fn FibAcc(0, a_, ignore_) {a_}}
    {Fn FibAcc(n_, a_, b_) {FibAcc({- n_ 1}, b_, {+ a_ b_})} :guard {> n_ 0}}

    {Fn Factorial(0) {1}}
    {Fn Factorial(n_) {{* n_ Factorial({- n_ 1})}}}

    ;; Or:
    ;; {Def Fib    {Args n_}       Call(FibAcc, n_, 0, 1)}
    ;; {Def FibAcc {Args 0 a_ _}   a_}
    ;; {Def FibAcc {Args n_ a_ b_} Call(FibAcc, {- n_ 1}, b_, {+ a_ b_}) :guard {> n_ 0}}
  }
}
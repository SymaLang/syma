{Module Demo/TestSimplify
  {Export}
  {Import Algebra/Simplify as Alg}

  {Program
    {App
      {State
        ;; Test different expressions
        {Expr1 {Add {Mul 2 c} {Mul 2 c}}}
        {Expr2 {Add 3 5}}
        {Expr3 {Mul 2 3}}
        ;; Test Map directly
        {MapTest {Map Alg/Simplify {Mul 2 c} {Mul 2 c}}}
        {ApplyTest {Apply Alg/Simplify {Mul 2 c}}}
      }
      {UI
        {Div :class "card"
          {H1 "Simplification Tests"}
          {Div
            {P "Original: {Add {Mul 2 c} {Mul 2 c}}"}
            {P "Simplified: " {Show Expr1}}
          }
          {Div
            {P "Original: {Add 3 5}"}
            {P "Simplified: " {Show Expr2}}
          }
          {Div
            {P "Original: {Mul 2 3}"}
            {P "Simplified: " {Show Expr3}}
          }
          {Div
            {P "Map Test: " {Show MapTest}}
          }
          {Div
            {P "Apply Test: " {Show ApplyTest}}
          }
        }
      }
    }
  }

  {Rules
    R("LiftApplyThroughProgramAndApp",
       Apply(act_, Program(App(st_, ui_), eff_)),
       Program(App(Apply(act_, st_), ui_), eff_)
    )

    R("ShowExpr1",
      /@(Show(Expr1), App(State(Expr1(e_), rest___), _)),
      Alg/Simplify(e_),
      50
    )

    R("ShowExpr2",
      /@(Show(Expr2), App(State(Expr2(e_), rest___), _)),
      Alg/Simplify(e_),
      50
    )

    R("ShowExpr3",
      /@(Show(Expr3), App(State(Expr3(e_), rest___), _)),
      Alg/Simplify(e_),
      50
    )

    R("ShowMapTest",
      /@(Show(MapTest), App(State(MapTest(m_), rest___), _)),
      m_,
      50
    )

    R("ShowApplyTest",
      /@(Show(ApplyTest), App(State(ApplyTest(a_), rest___), _)),
      a_,
      50
    )
  }
}
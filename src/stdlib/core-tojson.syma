{Module Core/ToJSON
  {Import Core/Rope as CR open}
  {Export ToJSON}
  {Rules
    ; --- make JVal delegate structured values ---
    {:rule J/val->arr {JVal {JSONArr xs...}} -> {JArr xs...}}
    {:rule J/val->obj {JVal {JSONObj kvs...}} -> {JObj kvs...}}

    ; atoms
    {:rule J/true  {JVal True}  -> "true"}
    {:rule J/false {JVal False} -> "false"}
    {:rule J/null  {JVal Empty} -> "null"}
    {:rule J/str   {JVal s_} -> {JQuote s_} :guard IsStr(s_)}
    {:rule J/num   {JVal n_} -> ToString(n_) :guard IsNum(n_)}

    ; strings (quoting)
    {:rule J/quote {JQuote s_} -> {RopeCat3 "\"" {Escape s_} "\""}}

    ; arrays
    {:rule J/arr/empty {JArr} -> {RopeCat "[" "]"}}
    {:rule J/arr/build {JArr items...} -> {RopeCat3 "[" {JArrJoin items...} "]"}}
    {:rule J/arr/join1 {JArrJoin x_} -> {JVal x_}}
    {:rule J/arr/joinN {JArrJoin x_ y_ rest...} -> {RopeCat3 {JVal x_} ", " {JArrJoin y_ rest...}}}

    ; objects
    {:rule J/obj/empty {JObj} -> {RopeCat "{" "}"}}
    {:rule J/obj/build {JObj kvs...} -> {RopeCat3 "{" {JObjJoin kvs...} "}"}}
    {:rule J/kv {JPair {JSONKV k_ v_}} -> {RopeCat3 {JQuote k_} ": " {JVal v_}}}
    {:rule J/obj/join1 {JObjJoin kv_} -> {JPair kv_}}
    {:rule J/obj/joinN {JObjJoin kv_ kv2_ rest...} -> {RopeCat3 {JPair kv_} ", " {JObjJoin kv2_ rest...}}}

    ; -------- Public entry --------
    {R ToJSON/a {ToJSON x_} {RopeEmit {JVal x_} } {IsNum {Frozen x_}}}
    {R ToJSON/b {ToJSON x_} {RopeEmit {JVal x_} } {IsStr {Frozen x_}}}
    {R ToJSON/c {ToJSON x_} {RopeEmit {JVal x_} } {Eq Empty {Frozen x_}}}
    {R ToJSON/d {ToJSON x_} {RopeEmit {JVal x_} } {Eq True {Frozen x_}}}
    {R ToJSON/e {ToJSON x_} {RopeEmit {JVal x_} } {Eq False {Frozen x_}}}
    {R ToJSON/f {ToJSON {head_ v...}} {RopeEmit {JVal {head_ v...}} } {Eq JSONArr {Frozen head_}}}
    {R ToJSON/g {ToJSON {head_ v...}} {RopeEmit {JVal {head_ v...}} } {Eq JSONObj {Frozen head_}}}
  }
}